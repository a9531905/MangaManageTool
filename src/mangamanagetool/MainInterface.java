/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mangamanagetool;

import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.*;

/**
 *
 * @author jhuang
 */
public class MainInterface extends javax.swing.JFrame
{

    /**
     * Creates new form MainInterface
     */
    public MainInterface()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        unsortedFolderTF = new javax.swing.JTextField();
        sortedFolderTF = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener()
        {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt)
            {
                chooseWhereSortedFoldersAre(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt)
            {
            }
        });

        unsortedFolderTF.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                unsortedFolderTFActionPerformed(evt);
            }
        });

        jButton3.setText("Run");
        jButton3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                run(evt);
            }
        });

        jButton1.setText("Folder Where Unsorted Files Are");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chooseWhereUnsortedFilesAre(evt);
            }
        });

        jButton2.setText("Folder Where Sorted Folders Are");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sortedFolderTF, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                            .addComponent(unsortedFolderTF))
                        .addComponent(jButton1)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unsortedFolderTF, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortedFolderTF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        unsortedFolderTF.getAccessibleContext().setAccessibleName("unsortedFolderTF");
        sortedFolderTF.getAccessibleContext().setAccessibleName("sortedFolderTF");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String chooseFile()
    {
         //Create a file chooser
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        chooser.setApproveButtonText("choose");
        
        //In response to a button click:
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) 
        {
             //System.out.println("You chose to open this file: " + chooser.getSelectedFile());
             return chooser.getSelectedFile().getPath();
        }
        else
        {
            return null;
        }
    }
    
    
    private void unsortedFolderTFActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_unsortedFolderTFActionPerformed
    {//GEN-HEADEREND:event_unsortedFolderTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unsortedFolderTFActionPerformed

    private void run(java.awt.event.ActionEvent evt)//GEN-FIRST:event_run
    {//GEN-HEADEREND:event_run
       
         UnsortedFileTable unsortedFileList = null;
         SortedFileTable authorList = null;
        try 
       {
            String unsortedPath = this.unsortedFolderTF.getText().trim();

            unsortedFileList = new UnsortedFileTable(unsortedPath.trim());
            //unsortedFileList.debugDisplay();
  
       }
       catch (Exception e)
       {
           System.out.println(e);
           JOptionPane.showMessageDialog(this, e);
       }   
       
       
        try
        {
            String sortedPath = this.sortedFolderTF.getText().trim();
            authorList = new SortedFileTable(sortedPath.trim());
            //authorList.debugDisplay();
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
       
         moveFileAndMkdir(authorList, unsortedFileList);
    }//GEN-LAST:event_run

    private void chooseWhereUnsortedFilesAre(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chooseWhereUnsortedFilesAre
    {//GEN-HEADEREND:event_chooseWhereUnsortedFilesAre
        this.unsortedFolderTF.setText(chooseFile());
    }//GEN-LAST:event_chooseWhereUnsortedFilesAre

    private void chooseWhereSortedFoldersAre(java.awt.event.HierarchyEvent evt)//GEN-FIRST:event_chooseWhereSortedFoldersAre
    {//GEN-HEADEREND:event_chooseWhereSortedFoldersAre
        this.sortedFolderTF.setText(chooseFile());
    }//GEN-LAST:event_chooseWhereSortedFoldersAre

    
    /**
     * find matched files between SortedFileTable and UnsortedFileTable print
     * out instruction about how to move file from unsortedFolder to
     * sortedFolder You need to move file manually to make sure no any problem
     *
     * @param existingAuthorList
     * @param unsortedFileList
     * @throws Exception
     */
    public static void moveFileAndMkdir(SortedFileTable existingAuthorList, UnsortedFileTable unsortedFileList)
    {
        try
        {

            //get the author of unsorted files     
            ArrayList<String> unsortedAuthorNames = new ArrayList(unsortedFileList.table.keySet());
            //sort them for more readable output00
            Collections.sort(unsortedAuthorNames);

            int mvCounter = 0;
            int mkdirCounter = 0;




            //command to make new folder 
            //windows and mac both use "mkdir" to make new directory
            StringBuilder mkdrirBuilder = new StringBuilder();

            //command to move files one windows
            StringBuilder mvWinCommand = new StringBuilder();

            //command to move file on mac and linux
            StringBuilder mvMacCommand = new StringBuilder();

            StringBuilder mkdirCommand = new StringBuilder();

            for (String unsortedAuthorName : unsortedAuthorNames)
            {
                //check if there already exist a folder for the file
                File destFolder = getAuthorFolder(existingAuthorList, unsortedAuthorName, unsortedFileList.table.get(unsortedAuthorName).names);
                if (destFolder != null)
                {
                  

                    //tell user to move the file
                    ArrayList<File> sourceFiles = unsortedFileList.table.get(unsortedAuthorName).files;
                    for (File sourceFile : sourceFiles)
                    {
                        mvMacCommand.append("mv " + "\"" + sourceFile.getPath() + "\" " + "\"" + destFolder.getPath() + "\"\n");
                        mvWinCommand.append("move " + "\"" + sourceFile.getPath() + "\" " + "\"" + destFolder.getPath() + "\"\n");

                    }

                    //move src dest
                    mvCounter++;
                }
                else if (unsortedFileList.table.get(unsortedAuthorName).files.size() >= 2)
                {
                    //if folder  does not exist and this author have more than two book
                    //tell user to create one

                  

                    //mkdir folder  
                    mkdirCommand.append("mkdir \"" + unsortedAuthorName + "\"\n");
                    mkdirCounter++;
                }
            }

            PrintWriter out;
            
            out = new PrintWriter("mv_win_command.txt");
            out.print(mvWinCommand.toString());
            out.close();
            
            out = new PrintWriter("mv_mac_command.txt");
            out.print(mvMacCommand.toString());
            out.close();
            
            out = new PrintWriter("mkdir_command.txt");
            out.print(mkdirCommand.toString());
            out.close();
            

            System.out.println("移动" + mvCounter + "次");
    
            System.out.println(mvWinCommand);

            System.out.println("\n\n\n\n\n\n\n\n\n");
            System.out.println("建立新文件" + mkdirCounter + "次");
            System.out.print(mkdrirBuilder.toString());
            System.out.println(mkdirCommand);
            System.out.println(mvMacCommand);
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }

    //@param s: author name
    //@return the folder url, null if no exitence
    public static File getAuthorFolder(SortedFileTable sortedtable, String sourceName, ArrayList<String> sourceNames)
    {
        //if we can find directly, nice
        if (sortedtable.table.contains(sourceName))
        {
            return sortedtable.table.get(sourceName).directory;
        }

        //if not, compare all authors names

        for (AuthorInfo entry : sortedtable.table.values())
        {
            for (String name : entry.names)
            {
                for (String name2 : sourceNames)
                {
                    if (NameParser.stringDistance(name2, name) < 2)
                    {
                        return entry.directory;
                    }
                }
            }

        }
        return null;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainInterface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField sortedFolderTF;
    private javax.swing.JTextField unsortedFolderTF;
    // End of variables declaration//GEN-END:variables
}
